# -*- coding: utf-8 -*-
"""Signal_ECG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q20L1F9Rx4HoSfjuB7gOy7NNIJHZq05Z

# **LOADING DATA**
"""

#installation package kaggla
! pip install -q kaggle

from google.colab import drive
drive.mount('/content/drive')

#creation d'un dossier kaggle
! mkdir ~/.kaggle/

#copier kaggle.json dans le dossier kaggle
! cp '/content/drive/MyDrive/kaggle/kaggle.json' ~/.kaggle/

#! pip install -q neurokit2

### Import required packages
import csv
import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Helps to obtain the FFT
import scipy.fftpack    
# Various operations on signals (waveforms)
import scipy.signal as signal

#donner les droits à kaggle.json
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d anashattay/ecg-heart

! unzip /content/ecg-heart.zip -d ecg-heart

! pip install -q heartpy

df = pd.read_csv("../../Downloads/Cartier_sansEM_ECG.csv")
#df1=df[df.index<5000]
y = [e for e in df.ECG
    ]

"""# **FILTERING**"""

from matplotlib.pyplot import figure
figure(figsize=(10, 10), dpi=80)
plt.plot(y)

import heartpy as hp
import heartpy.filtering



#loading database 
df2 = pd.read_csv("SSRT_decourstemporel-Stopsignal.csv")
df2

df2.dropna(axis=0,how='all',inplace=True)

Fin=df2['Décours temporel des essais(ms)'].iloc[-1]
Fin

#Import data 
hdata=hp.get_data('../../Downloads/Cartier_sansEM_ECG.csv', )
#Slicing Data (10 essais)
#hdata=hdata[1:len(hdata)]
len(hdata)

len(hdata)/2250

"""#Data Cleaning"""

len_hdata=int(len(hdata)/2250)
if Fin>len(hdata) :
  df2=df2[:len_hdata]
df2

val=df2['Décours temporel des essais(ms)'].iloc[-1]
val
if len(hdata)>val :
  hdata=hdata[:int(val)]

len(hdata)

hdata=hdata[:len(hdata)]

"""# Filtering Signal"""

#BIGGER IMAGE
plt.rcParams['figure.figsize'] = [40, 10]

#Filtring Signal (lowpass)
filtered = hp.filter_signal(hdata, cutoff = 5, sample_rate = 1000.0, order = 3, filtertype='lowpass')
plt.plot(filtered)
type(filtered)

"""# **Peaks** **detection**"""

w,m=hp.process(filtered,1000.0)
hp.plotter(w,m)
peaks=w['peaklist']

len(peaks)

#HEART RATE FROM SCRATCH
RR_list = []
cnt = 0
fs=1000
while (cnt < (len(peaks)-1)):
    RR_interval = (peaks[cnt+1] - peaks[cnt]) #Calculate distance between beats in # of samples
    ms_dist = ((RR_interval / fs) * 1000.0) #Convert sample distances to ms distances
    RR_list.append(ms_dist) #Append to list
    cnt += 1

bpm = 60000 / np.mean(RR_list) #60000 ms (1 minute) / average R-R interval of signal
print ("Average Heart Beat is: %.01f" %bpm) #Round off to 1 decimal and print



'Le rythme cardiaque est égal : %.3f' %m['bpm']

df2.head()



"""# **Signal Delimitation**"""

ListeTime=df2['Décours temporel des essais(ms)'].tolist()
#ListeTime=ListeTime[0:10]
len(ListeTime)

Stop=df2['stop'].tolist()

plt.rcParams['figure.figsize'] = [50, 10] 
fig, ax = plt.subplots()


for i in range(len(ListeTime)):

# get first signal range
  signal_start =ListeTime[i]
  
  if Stop[i]=='stop' :
    text_area=(signal_start+signal_start-2900)//2
    plt.text(text_area,0.22,'Cet essai contient un ''STOP' '')
  

  ax.plot(filtered)
# get x index of first signal
  

  ax.axvline(x=signal_start, color='orange')
  
 


plt.show()

peaks

Plist=[]  
ListPeaks=[]
seuil=2250
for e in peaks :
  if (e<seuil) :
    Plist.append(e)
  else: 
    
    ListPeaks.append(Plist) 
    Plist=[]  
    Plist.append(e)
    seuil+=2250
    
ListPeaks.append(Plist) 
print(ListPeaks)

"""# **CALCUL HR/HRV**"""

fs=1000
HR=[]
j=-1
for i in range(len(ListPeaks)):
  P=ListPeaks[i] 
  d=P[-1]-P[0]
  HR.append((fs/d)*60*2250*(10**(-3)))

HR

HRV=[]
for i in range(len(HR)-1):
  HRV.append(HR[i+1]-HR[i])
HRV

"""### Pour des meilleurs observations.."""

stopgo=[]
for i in range(len(ListeTime)):
  if Stop[i]=='stop' :
    stopgo.append('stop')
  else:
    stopgo.append('go')

#stopgo

df2

data_dic={'HR': HR , 'GO/STOP':stopgo}
data_dic
dfStopGo = pd.DataFrame(data_dic)
dfStopGo



import seaborn as sns
sns.catplot(x="GO/STOP", y="HR", order=["go", "stop"], data=dfStopGo
)

sns.catplot(x="GO/STOP", y="HR", kind='box', data=dfStopGo
)

Stop=df2['stop'][0:10]
lssrt=df2['SSRT'][0:10].values.tolist()
lstop=Stop.values.tolist()

print(lstop,lssrt)

import numpy as np 
np.nan

lssrt=np.nan_to_num(lssrt, copy=True, nan=0.0, posinf=None, neginf=None)

dfStopGo['Inhibition']=0
for i in range(0,10) :
  
  if (lstop[i]=='stop') :
    
    if not(lssrt[i]==None) and (lssrt[i]!=0.) :
   
      dfStopGo['Inhibition'][i]='True'
    
    else :
      
      dfStopGo['Inhibition'][i]='False'
  else :
    dfStopGo['Inhibition'][i]=np.nan

dfStopGo

"""# **CALCUL SSD**"""

TRGOmoyen=df2['RT (GO)'].mean()
TRGOmoyen

df2['SSD']=TRGOmoyen-df2['SSRT']

df2





plt.plot(filtered[0:2250])

w,m=hp.process(filtered,1000.0)
hp.plotter(w,m)
peaks=w['peaklist']
peaks[0]







# create a normalized Hanning window
windowSize = 120
window = np.hanning(windowSize)
window = window / window.sum()

# filter the data using convolution
filtered1 = np.convolve(window,hdata, mode='valid')
plt.plot(filtered1)

