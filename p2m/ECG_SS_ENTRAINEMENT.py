# -*- coding: utf-8 -*-
"""Signal_ECG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q20L1F9Rx4HoSfjuB7gOy7NNIJHZq05Z

# **LOADING DATA**
"""
import math

f = open("Heart Rates", "w")


### Import required packages
import csv
import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Helps to obtipy.fftpack ain the FFT
#import sc
# Various operations on signals (waveforms)
#import scipy.signal as signal
dfHR = pd.DataFrame(columns=['Name', 'HR'])
f1=open("Dataframes_ecg", "r")
lines=f1.readlines()
#print(lines)
#print(lines[0].strip('\n')+'_sansEM_ECG.csv')
HR = []
peaks=[]
RR_list = []
Plist = []
ListPeaks = []
for line in lines:
    try:
        line = line.strip('\n')
        dfname=line+'_sansEM_ECG.csv'
        df = pd.read_csv(dfname)
        print(dfname)
        #df1=df[df.index<5000]
        y = [e for e in df.ECG
             ]

        """# **FILTERING**"""

        from matplotlib.pyplot import figure
        figure(figsize=(10, 10), dpi=80)
        plt.plot(y)

        import heartpy as hp
        import heartpy.filtering



        dfname1=line+'_SSRT.csv'
        print(dfname1)
        #loading database
        if line=='Marja':
            df2 = pd.read_csv(dfname1,encoding='latin-1')
        else:
            df2 = pd.read_csv(dfname1)


        df2.dropna(axis=0,how='all',inplace=True)

        Fin=df2['Décours temporel des essais(ms)'].iloc[-1]
        print(Fin)

        #Import data
        hdata=hp.get_data(dfname)
        if line=='felicite' :
            hdata = hdata[1:350000]
        #Slicing Data (10 essais)
        #hdata=hdata[1:len(hdata)]

        print(len(hdata))
        len(hdata)/2250

        len_hdata=int(len(hdata)/2250)
        if Fin>len(hdata) :
          df2=df2[:len_hdata]

          #Val=df2['Décours temporel des essais(ms)'].iloc[-1]
          #if len(hdata)>int(val) :
          #hdata=hdata[:val]

        #len(hdata)

        val=df2['Décours temporel des essais(ms)'].iloc[-1]

        if len(hdata)>val :
          hdata=hdata[:int(val)]

        len(hdata)

        hdata=hdata[1:len(hdata)]

        #BIGGER IMAGE
        #plt.rcParams['figure.figsize'] = [40, 10]

        #Filtring Signal (lowpass)
        filtered = hp.filter_signal(hdata, cutoff = 5, sample_rate = 1000.0, order = 3, filtertype='lowpass')
        #plt.plot(filtered)
        #type(filtered)

        """# **Peaks** **detection**"""

        w,m=hp.process(filtered,1000.0)
        hp.plotter(w,m)
        peaks=w['peaklist']

        print('Le rythme cardiaque est égal : %.3f' % m['bpm'])
        #print(peaks)
        #HEART RATE FROM SCRATCH
        RR_list = []
        cnt = 0
        fs=1000
        while (cnt < (len(peaks)-1)):
          RR_interval = (peaks[cnt+1] - peaks[cnt]) #Calculate distance between beats in # of samples
          ms_dist = ((RR_interval / fs) * 1000.0) #Convert sample distances to ms distances
          RR_list.append(ms_dist) #Append to list
          cnt += 1

        bpm = 60000 / np.mean(RR_list) #60000 ms (1 minute) / average R-R interval of signal
        print ("Average Heart Beat is: %.01f" %bpm) #Round off to 1 decimal and print



        #max=6000/max(RR_list)

        Plist = []
        ListPeaks = []
        seuil = 2250
        for e in peaks:
            if (e < seuil):
                Plist.append(e)
            else:

                ListPeaks.append(Plist)
                Plist = []
                Plist.append(e)
                seuil += 2250

        ListPeaks.append(Plist)
        #pypyprint(ListPeaks)

        """# **CALCUL HR/HRV**"""

        fs = 1000

        j = -1
        for i in range(len(ListPeaks)):
            P = ListPeaks[i]
            d = P[-1] - P[0]
            HR.append((fs / d) * 60 * 2250 * (10 ** (-3)))
        #print('heart rates : ',HR)
        newlist = [x for x in HR if math.isinf(x) == False]
        #print(newlist)
        c=2596.153846153846
        if c in newlist :
            newlist.remove(c)


        print('le minimum est ',min(newlist))
        print('le max est ', max(newlist))
        min1 = min(newlist)
        max1 = max(newlist)
        print(min1, max1)

        bpm = (bpm - min1) / (max1 - min1)

        print("Average Heart Beat is: %.01f" % bpm)  # Round off to 1 decimal and print

        print('Le rythme cardiaque est égal : %.3f' % m['bpm'])

        toprint=line+" Heart Rate : "+str(bpm)+"\n"
        f.write(toprint)

    #except :
    #print('il ya un probleme')


        #hr_normalized=(bpm-min)/(max-min)
        new_row = {'Name': line, 'HR normalisée ': bpm}
        #new_row1 = {'Name': line, 'HR_Normalized': bpm}
        df_dictionary = pd.DataFrame([new_row])
        #df_dictionary1 = pd.DataFrame([new_row1])
        dfHR = pd.concat([dfHR, df_dictionary], ignore_index=True)
    except:
        print(dfHR)
    dfHR.to_csv('HR_SS_ENTRAINEMENT1.csv', index=False)


